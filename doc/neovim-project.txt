*neovim-project.txt*             For              Last change: 2025 March 30

==============================================================================
Table of Contents                           *neovim-project-table-of-contents*

1. üóÉÔ∏è Neovim project manager plugin|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin|
  - Usage         |neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-usage|
  - üì¶ Installation|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-üì¶-installation|
  - ‚öôÔ∏è Configuration|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-‚öôÔ∏è-configuration|
  - Commands   |neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-commands|
  - ‚ö° Requirements|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-‚ö°-requirements|
  - How to manage dotfiles repo|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-how-to-manage-dotfiles-repo|
  - ü§ù Contributing|neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-ü§ù-contributing|

==============================================================================
1. üóÉÔ∏è Neovim project manager plugin *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin*

**Neovim project** plugin simplifies project management by maintaining project
history and providing quick access to saved sessions via
[Telescope](https://github.com/nvim-telescope/telescope.nvim),
[fzf-lua](https://github.com/ibhagwan/fzf-lua), or
["snacks.nvim"](https://github.com/folke/snacks.nvim/). It runs on top of the
[Neovim Session Manager](https://github.com/Shatur/neovim-session-manager),
which is needed to store all open tabs and buffers for each project.

- ‚úÖ Start where you left off last time.
- ‚úÖ Switch from project to project in second.
- ‚úÖ Sessions and history can be synced across your devices (rsync, Syncthing, Nextcloud, Dropbox, etc.)
- ‚úÖ Find all your projects by glob patterns defined in config.
- ‚úÖ Autosave **neo-tree.nvim** expanded directories and buffers order in **barbar.nvim**.

üôè **Neovim project manager** plugin is heavily inspired by project.vim
<https://github.com/ahmedkhalf/project.nvim>


USAGE             *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-usage*

1. Set patterns in the |neovim-project-configuration| to discover your projects.
2. Use |neovim-project-commands| to open your project. Or open Neovim in the project directory. Both methods will create a session.
3. Open files inside the project and work.
4. The session will be saved before closing Neovim or switching to another project via |neovim-project-commands|.
5. Open Neovim in any non-project directory and the latest session will be loaded.


üì¶ INSTALLATION *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-üì¶-installation*

You can install the plugin using your preferred package manager.

Lazy.nvim ~

>lua
    {
      "coffebar/neovim-project",
      opts = {
        projects = { -- define project roots
          "~/projects/*",
          "~/.config/*",
        },
        picker = {
          type = "telescope", -- one of "telescope", "fzf-lua", or "snacks"
        }
      },
      init = function()
        -- enable saving the state of plugins in the session
        vim.opt.sessionoptions:append("globals") -- save global variables that start with an uppercase letter and contain at least one lowercase letter.
      end,
      dependencies = {
        { "nvim-lua/plenary.nvim" },
        -- optional picker
        { "nvim-telescope/telescope.nvim", tag = "0.1.4" },
        -- optional picker
        { "ibhagwan/fzf-lua" },
	-- optional picker
	{ "folke/snacks.nvim" },
        { "Shatur/neovim-session-manager" },
      },
      lazy = false,
      priority = 100,
    },
<

packer.nvim ~

>lua
    use({
      "coffebar/neovim-project",
      config = function()
        -- enable saving the state of plugins in the session
        vim.opt.sessionoptions:append("globals") -- save global variables that start with an uppercase letter and contain at least one lowercase letter.
        -- setup neovim-project plugin
        require("neovim-project").setup {
          projects = { -- define project roots
            "~/projects/*",
            "~/.config/*",
          },
          picker = {
            type = "telescope", -- one of "telescope", "fzf-lua", or "snacks"
          }
        }
      end,
      requires = {
        { "nvim-lua/plenary.nvim" },
        -- optional picker
        { "nvim-telescope/telescope.nvim", tag = "0.1.4" },
        -- optional picker
        { "ibhagwan/fzf-lua" },
	-- optional picker
	{ "folke/snacks.nvim" },
        { "Shatur/neovim-session-manager" },
      }
    })
<

pckr.nvim ~

>lua
    {
      "coffebar/neovim-project",
      config = function()
        -- enable saving the state of plugins in the session
        vim.opt.sessionoptions:append("globals") -- save global variables that start with an uppercase letter and contain at least one lowercase letter.
        -- setup neovim-project plugin
        require("neovim-project").setup {
          projects = { -- define project roots
            "~/projects/*",
            "~/.config/*",
          },
          picker = {
            type = "telescope", -- one of "telescope", "fzf-lua", or "snacks"
          }
        }
      end,
      requires = {
        { "nvim-lua/plenary.nvim" },
        -- optional picker
        { "nvim-telescope/telescope.nvim", tag = "0.1.4" },
        -- optional picker
        { "ibhagwan/fzf-lua" },
        -- optional picker
        { "folke/snacks.nvim" },
        { "Shatur/neovim-session-manager" },
      }
    };
<


‚öôÔ∏è CONFIGURATION *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-‚öôÔ∏è-configuration*


DEFAULT OPTIONS: ~

>lua
    {
      -- Project directories
      projects = {
        "~/projects/*",
        "~/p*cts/*", -- glob pattern is supported
        "~/projects/repos/*",
        "~/.config/*",
        "~/work/*",
      },
      -- Path to store history and sessions
      datapath = vim.fn.stdpath("data"), -- ~/.local/share/nvim/
      -- Load the most recent session on startup if not in the project directory
      last_session_on_startup = true,
      -- Dashboard mode prevent session autoload on startup
      dashboard_mode = false,
      -- Timeout in milliseconds before trigger FileType autocmd after session load
      -- to make sure lsp servers are attached to the current buffer
      -- Set to 0 to disable triggering FileType autocmd
      filetype_autocmd_timeout = 200,
      -- Keymap to delete project from history in Telescope picker
      forget_project_keys = {
        -- insert mode: Ctrl+d
        i = "<C-d>",
        -- normal mode: d
        n = "d"
      },
      -- Follow symbolic links in glob patterns (affects startup speed)
      -- "full" or true - follow symlinks in all matched directories
      -- "partial" - follow symlinks before any matching operators (*, ?, [])
      -- "none" or false or nil - do not follow symlinks
      follow_symlinks = "full",

      -- Overwrite some of Session Manager options
      session_manager_opts = {
        autosave_ignore_dirs = {
          vim.fn.expand("~"), -- don't create a session for $HOME/
          "/tmp",
        },
        autosave_ignore_filetypes = {
          -- All buffers of these file types will be closed before the session is saved
          "ccc-ui",
          "gitcommit",
          "gitrebase",
          "qf",
          "toggleterm",
        },
      },
      -- Picker to use for project selection
      -- Options: "telescope", "fzf-lua"
      -- Fallback to builtin select ui if the specified picker is not available
      picker = {
        type = "telescope", -- one of "telescope", "fzf-lua", or "snacks"
        preview = {
          enabled = true, -- show directory structure in Telescope preview
          git_status = true, -- show branch name and the git status of each file/folder
          git_fetch = false, -- fetch from remote, used to display the number of commits ahead/behind, requires git authorization
          show_hidden = true, -- show hidden files/folders
        },
        opts = {
          -- picker-specific options
        },
      },
    }
<


COMMANDS       *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-commands*

Neovim project manager will add these commands:

- `:NeovimProjectDiscover [sort]` - find a project based on patterns, with optional sorting arguments:
  - `default` (or no argument) - uses the order specified in the config.
  - `history` - prioritises the most recently accessed projects.
  - `alphabetical_name` - sorts projects alphabetically by project name.
  - `alphabetical_path` - sorts projects alphabetically by their full path.
- `:NeovimProjectHistory` - select a project from your recent history using the configured picker.
- `:NeovimProjectLoadRecent` - open the previous session.
- `:NeovimProjectLoadHist` - opens the project from the history using the configured picker.
- `:NeovimProjectLoad` - opens the project from all your projects using the configured picker.

History is sorted by access time. "Discover" keeps order as you have in the
config, but can be overridden using the sorting options.

MAPPINGS

Use `Ctrl+d` in Telescope / fzf-lua / snacks.nvim to delete the project's
session and remove it from the history.

‚ö° REQUIREMENTS*neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-‚ö°-requirements*

- Neovim >= 0.10.0
- Optional: Telescope.nvim for the Telescope picker
- Optional: fzf-lua for the fzf-lua picker
- Optional: snacks.nvim for the snacks.nvim picker


HOW TO MANAGE DOTFILES REPO *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-how-to-manage-dotfiles-repo*

If you have a repository for your dotfiles, you will find it convenient to
access them through projects.

Project pattern `~/.config/*` matches many programs config folders, including
Neovim. So when you need to edit Neovim config, you open project
`~/.config/nvim` by typing "nv..". When you need to edit alacritty config - you
start typing "ala.."

Of course, you want to use vim-fugitive and gitsigns in these projects. And it
should be a single git repo for dotfiles. By default, Neovim will know nothing
about your dotfiles repo.

Create autocommands to update env variables to tell Neovim where is your
dotfiles bare repo. Here is an example from my dotfiles:

>lua
    local augroup = vim.api.nvim_create_augroup("user_cmds", { clear = true })

    local function update_git_env_for_dotfiles()
      -- Auto change ENV variables to enable
      -- bare git repository for dotfiles after
      -- loading saved session
      local home = vim.fn.expand("~")
      local git_dir = home .. "/dotfiles"

      if vim.env.GIT_DIR ~= nil and vim.env.GIT_DIR ~= git_dir then
        return
      end

      -- check dotfiles dir exists on current machine
      if vim.fn.isdirectory(git_dir) ~= 1 then
        vim.env.GIT_DIR = nil
        vim.env.GIT_WORK_TREE = nil
        return
      end

      -- check if the current working directory should belong to dotfiles
      local cwd = vim.loop.cwd()
      if vim.startswith(cwd, home .. "/.config/") or cwd == home or cwd == home .. "/.local/bin" then
        if vim.env.GIT_DIR == nil then
          -- export git location into ENV
          vim.env.GIT_DIR = git_dir
          vim.env.GIT_WORK_TREE = home
        end
      else
        if vim.env.GIT_DIR == git_dir then
          -- unset variables
          vim.env.GIT_DIR = nil
          vim.env.GIT_WORK_TREE = nil
        end
      end
    end

    vim.api.nvim_create_autocmd("DirChanged", {
      pattern = { "*" },
      group = augroup,
      desc = "Update git env for dotfiles after changing directory",
      callback = function()
        update_git_env_for_dotfiles()
      end,
    })

    vim.api.nvim_create_autocmd("User", {
      pattern = { "SessionLoadPost" },
      group = augroup,
      desc = "Update git env for dotfiles after loading session",
      callback = function()
        update_git_env_for_dotfiles()
      end,
    })
<

This code should be required from your `init.lua` before plugins.


ü§ù CONTRIBUTING *neovim-project-üóÉÔ∏è-neovim-project-manager-plugin-ü§ù-contributing*

- Open a ticket if you want integration with another plugin, or if you want to request a new feature.
- If you encounter bugs please open an issue.
- Pull requests are welcome. Follow the Conventional Commits specification for commit naming.

==============================================================================

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
